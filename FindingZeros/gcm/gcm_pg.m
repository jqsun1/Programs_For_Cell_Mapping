function [S_pg, S_new, Gr] = gcm_pg(GCM, S_pg, N)
% -------------------------------------------------------------------------
% Finding covering set of nonlinear dynamics using generalized cell mapping
% (GCM). The code starts from the PG-like cell set generated by simple cell
% mapping and associated expansion process. It enables the global
% classifcation of transient cells, real PG cells and candidate PG cells. As
% the output, both originally input PG cell set and the newly generated
% candidate PG cell set would be used for further selection and subdivision
% in set-oriented framework.
%
% Generally, there are three types of cell at last:
% PG-like cells:      Gr = 1
% Transient cells:    Gr = -2
% PG candidate cells: Gr = -3
%
% During the algorithm, there are two types of temporary cells:
% Virgin cells:     Gr = 0
% Processing cells: Gr = -1
%
% Note this algorithm actually loosen the PG selection rules as described
% in Hsu's monography since this programm mainly at generating a complete
% covering set for further refinement. Therefore, the first priority is to
% capture as much information as possible. Also, this code is only
% implemented at the first stage of global attractor finding algorithm.
%
% Input arguments:
%      GCM:   generalized cell mapping database with z->{I,C,P}
%             where C is the image cell set, I is the No. of images and P
%             is the sampling probabiliy of each image cell
%      S_pg:  generated PG-like cells via SCM
%       N:    cell space partition
%
% Output arguments:
%      S_pg:  same as the input
%      S_new: cells with Gr=-3 for visulization
%       Gr:   cell classification under GCM framework
% -------------------------------------------------------------------------
Nc = prod(N);
Gr = zeros(Nc,1);
%
% Designate absorbing cells, PG-cells and one-step sink cells first
% -------------------------------------------------------------------------
% Find one-step absorbing cells if exist
U = setdiff(1:Nc, S_pg);
for i = 1:length(U)
    cell = U(i);
    %
    if GCM{cell,1} == 1 && GCM{cell,2} == cell
        Gr(cell) = -3; % denote absorbing set also as candidates
    elseif isempty(GCM{cell,2})
        Gr(cell) = -2; % transient cells lead to sink cells (alterative way)
    end
end
%
% Assign original PG-like set its Gr No.
Gr(S_pg) =  1;
% -------------------------------------------------------------------------
%
% Process the entire cell set with classification
for i = 1:Nc
    cell = i;
    %
    if Gr(cell)~=0
        continue
    else
        cell_old = cell;
        flag = true; % shooting indicator
        %
        % generating shooting sequence
        seq = cell_old;
        counter = 0;
        while flag
            %
            counter = counter + 1;
            cell_new = GCM{cell_old,2}(1); % one-step shoot of 1st image cell
            seq = [seq; cell_new];
            %
            switch Gr(cell_new)
                case 0
                    % keep shooting
                    Gr(cell_old) = -1; % under processing
                    cell_old = cell_new;
                    continue
                case -1
                    % found a loop structure
                    cs = seq(end-1);
                    survive = true;
                    for m = 2: GCM{cs,1}
                        % check the status of the "mth" image cell
                        img = GCM{cs,2}(m);
                        switch Gr(img)
                            case -1
                                % more likely to be a potential PG
                                continue
                            case 0
                                % keep cs untouched but img as processing
                                Gr(img) = -1;
                                continue
                            otherwise
                                % transient cells
                                Gr(seq(1:end-1)) = -2;
                                flag = false;
                                survive = false;
                                break
                        end
                    end
                    %
                    % If cs can surview the upper loop, we desingate cs as
                    % well as all its image cells as  candidate PG cells
                    if survive
                        Gr([cs; GCM{cs,2}]) = -3;
                    end
                otherwise
                    % transient cell
                    Gr(seq(1:end-1)) = -2;
                    flag = false;
            end
        end
    end
end
%
% Hopefully, there would be no cell still under processing or unprocessed
% if ismember(-1,Gr) || ismember(0,Gr)
%     error('There are still cells under processing or unprocessed!');
% end
%
% Extract new PG candidate cells
S_new = find(Gr == -3);